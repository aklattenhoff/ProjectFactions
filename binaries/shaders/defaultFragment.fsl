#version 330

float FxaaLuma(vec4 rgba) { return rgba.y; }

vec4 FxaaPixelShader(
	vec2 pos,
	sampler2D tex,
	vec2 fxaaQualityRcpFrame,
	// Choose the amount of sub-pixel aliasing removal.
	// This can effect sharpness.
	//   1.00 - upper limit (softer)
	//   0.75 - default amount of filtering
	//   0.50 - lower limit (sharper, less sub-pixel aliasing removal)
	//   0.25 - almost off
	//   0.00 - completely off
	float fxaaQualitySubpix,
	// The minimum amount of local contrast required to apply algorithm.
	//   0.333 - too little (faster)
	//   0.250 - low quality
	//   0.166 - default
	//   0.125 - high quality 
	//   0.063 - overkill (slower)
	float fxaaQualityEdgeThreshold,
	// Trims the algorithm from processing darks.
	//   0.0833 - upper limit (default, the start of visible unfiltered edges)
	//   0.0625 - high quality (faster)
	//   0.0312 - visible limit (slower)
	// Special notes when using FXAA_GREEN_AS_LUMA,
	//   Likely want to set this to zero.
	float fxaaQualityEdgeThresholdMin
) {
/*--------------------------------------------------------------------------*/
	vec2 posM = pos;
	vec4 rgbM = texture(tex, posM);
	float lumaM = FxaaLuma(rgbM);
	float lumaS = FxaaLuma(textureOffset(tex, posM, ivec2( 0, 1)));
	float lumaE = FxaaLuma(textureOffset(tex, posM, ivec2( 1, 0)));
	float lumaN = FxaaLuma(textureOffset(tex, posM, ivec2( 0,-1)));
	float lumaW = FxaaLuma(textureOffset(tex, posM, ivec2(-1, 0)));
	float lumaNW = FxaaLuma(textureOffset(tex, posM, ivec2(-1,-1)));
	float lumaSE = FxaaLuma(textureOffset(tex, posM, ivec2( 1, 1)));
	float lumaNE = FxaaLuma(textureOffset(tex, posM, ivec2( 1,-1)));
	float lumaSW = FxaaLuma(textureOffset(tex, posM, ivec2(-1, 1)));
	float rangeMax = max(max(lumaN, lumaW), max(lumaE, max(lumaS, lumaM)));
	float rangeMin = min(min(lumaN, lumaW), min(lumaE, min(lumaS, lumaM)));
	float range = rangeMax - rangeMin;
	bool earlyExit = range < max(fxaaQualityEdgeThresholdMin, rangeMax * fxaaQualityEdgeThreshold);
	if(earlyExit)
		return rgbM;
/*--------------------------------------------------------------------------*/
	float lumaNS = lumaN + lumaS;
	float lumaWE = lumaW + lumaE;
	float lumaNESE = lumaNE + lumaSE;
	float lumaNWNE = lumaNW + lumaNE;
	float lumaNWSW = lumaNW + lumaSW;
	float lumaSWSE = lumaSW + lumaSE;
	float edgeHorz = abs((-2.0 * lumaW) + lumaNWSW) + ((abs((-2.0 * lumaM) + lumaNS) * 2.0) + abs((-2.0 * lumaE) + lumaNESE));
	float edgeVert = abs((-2.0 * lumaS) + lumaSWSE) + ((abs((-2.0 * lumaM) + lumaWE) * 2.0) + abs((-2.0 * lumaN) + lumaNWNE));
/*--------------------------------------------------------------------------*/
	float lengthSign = fxaaQualityRcpFrame.x;
	bool horzSpan = edgeHorz >= edgeVert;
	float subpixA = (lumaNS + lumaWE) * 2.0 + (lumaNWSW + lumaNESE);
	float subpixB = clamp(abs((subpixA * (1.0/12.0)) - lumaM) * 1.0/range, 0.0, 1.0);
	float subpixC = (((-2.0)*subpixB) + 3.0) * (subpixB * subpixB);
	float subpixD = (subpixC * subpixC) * fxaaQualitySubpix;
/*--------------------------------------------------------------------------*/
	if(!horzSpan) lumaN = lumaW;
	if(!horzSpan) lumaS = lumaE;
	if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;
	float gradientN = lumaN - lumaM;
	float gradientS = lumaS - lumaM;
	float lumaNN = lumaN + lumaM;
	float lumaSS = lumaS + lumaM;
	bool pairN = abs(gradientN) >= abs(gradientS);
	if(pairN) lengthSign = -lengthSign;
/*--------------------------------------------------------------------------*/
	vec2 posB = posM;
	vec2 offNP = vec2((!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x, (horzSpan) ? 0.0 : fxaaQualityRcpFrame.y);
	if(!horzSpan) posB.x += lengthSign * 0.5;
	if(horzSpan) posB.y += lengthSign * 0.5;
	vec2 posN = vec2(posB.x - offNP.x, posB.y - offNP.y);
	vec2 posP = vec2(posB.x + offNP.x, posB.y + offNP.y);
	float lumaEndN = FxaaLuma(texture(tex, posN));
	float lumaEndP = FxaaLuma(texture(tex, posP));
	if(!pairN) lumaNN = lumaSS;
	float gradientScaled = max(abs(gradientN), abs(gradientS)) * 1.0/4.0;
	bool lumaMLTZero = (lumaM - lumaNN * 0.5) < 0.0;
	lumaEndN -= lumaNN * 0.5;
	lumaEndP -= lumaNN * 0.5;
/*--------------------------------------------------------------------------*/
	bool doneN = true;
	bool doneP = true;
	bool doneNP = true;
	for (int k = 0;k < 5;k ++)
	{
		if(!doneNP) break;
		float FXAA_QUALITY = 1.0;
		if (k == 0) FXAA_QUALITY = 1.0;
		if (k == 1) FXAA_QUALITY = 1.5;
		if (k == 2) FXAA_QUALITY = 2.0;
		if (k == 3) FXAA_QUALITY = 2.0;
		if (k == 4) FXAA_QUALITY = 8.0;

		if(!doneN) lumaEndN = FxaaLuma(texture(tex, posN.xy));
		if(!doneP) lumaEndP = FxaaLuma(texture(tex, posP.xy));
		if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
		if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
		doneN = abs(lumaEndN) >= gradientScaled;
		doneP = abs(lumaEndP) >= gradientScaled;
		if(!doneN) posN.x -= offNP.x * FXAA_QUALITY;
		if(!doneN) posN.y -= offNP.y * FXAA_QUALITY;
		doneNP = (!doneN) || (!doneP);
		if(!doneP) posP.x += offNP.x * FXAA_QUALITY;
		if(!doneP) posP.y += offNP.y * FXAA_QUALITY;
	}
/*--------------------------------------------------------------------------*/
	float dstN = posM.x - posN.x;
	float dstP = posP.x - posM.x;
	if(!horzSpan) dstN = posM.y - posN.y;
	if(!horzSpan) dstP = posP.y - posM.y;
/*--------------------------------------------------------------------------*/
	bool goodSpan = (dstN < dstP) ? ((lumaEndN < 0.0) != lumaMLTZero) : ((lumaEndP < 0.0) != lumaMLTZero);
	float pixelOffset = (min(dstN, dstP) * (-1.0/(dstP + dstN))) + 0.5;
	float pixelOffsetSubpix = max(goodSpan ? pixelOffset : 0.0, subpixD);
	if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;
	if(horzSpan) posM.y += pixelOffsetSubpix * lengthSign;
	return vec4(texture(tex, posM).xyz, lumaM);
}

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}
// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }
// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}
// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

const uint losTable8[8] = 
uint[](
	0x01,
	0x02,
	0x04,
	0x08,
	0x10,
	0x20,
	0x40,
	0x80
);
float CalcLOS(sampler2D tex, float x, float y)
{
	int losCol = int(mod(x, 32.0));
	int channel = int(losCol/8);
	int los8Val = int(mod(losCol,8));
	vec4 losTex = texelFetch(tex, ivec2(x/32.0, y), 0)*255.0;
	float returnValue = ((int(losTex[3-channel]) & int(losTable8[7-los8Val])) > 0) ? 1.0 : 0.0;
	return returnValue;
}

in vec3 camPos;
in vec3 surfacePos;
in vec3 directionToLight;
in vec2 textureCoords;
in vec3 normalVec;
in float normalValue;
in vec3 lightVec;
flat in int passValOut;
flat in int shadowFlagOut;
in vec4 shadowOut;

uniform sampler2D sampler;
uniform sampler2D bumpSampler;

uniform vec2 fbSize;
uniform vec2 fbShadowSize;
uniform sampler2D fbColorSampler;
uniform sampler2D fbDepthSampler;
uniform sampler2D fbSilhouetteSampler;
uniform sampler2D fbShadowSampler;

uniform sampler2D gPositionSampler;
uniform sampler2D gNormalSampler;

uniform int losData[16];
uniform sampler2D losTextureSampler;
in float losShade;
in vec3 terrPos;
const int losTable[16] = 
int[](
	0x00000001,
	0x00000002,
	0x00000004,
	0x00000008,
	0x00000010,
	0x00000020,
	0x00000040,
	0x00000080,
	0x00000100,
	0x00000200,
	0x00000400,
	0x00000800,
	0x00001000,
	0x00002000,
	0x00004000,
	0x00008000
);

const int PASS_NORMAL = 0;
const int PASS_TERRAIN = 1;
const int PASS_UI = 2;
const int PASS_FINAL = 3;
const int PASS_DECAL = 4;
const int PASS_LINE = 5;

uniform int postProcessValue;

const int OCCLUSION_NONE = 0;
const int OCCLUSION_SET = 1;
const int OCCLUSION_TEST = 2;
uniform int occlusionValue;

//Data for terrain pass
const int MAX_TERRAIN_TEXTURES = 16;
uniform sampler2D terrainTextureSampler[MAX_TERRAIN_TEXTURES];
uniform sampler2D alphaTextureSampler;
in vec2 terrainTextureUV[3];
flat in int terrainTextureMap[3];
in vec2 alphaTextureUV[2];

uniform int postProc;

layout (location = 0) out vec4 outputColor;
layout (location = 1) out vec4 gPosition;

//out vec4 outputColor;

void main()
{
	gl_FragDepth = gl_FragCoord.z;
	//gl_FragDepth = surfacePos.z / 10000.0;
	
	if (postProc == 0)
	{
		gPosition = vec4(1.0);
	}
	
	if (passValOut == PASS_LINE)
	{
		gl_FragDepth = 0.0;
		outputColor = vec4(1.0, 0.0, 0.0, 1.0);
		return;
	}
	if (occlusionValue == OCCLUSION_SET)
	{
		vec4 t = texture(sampler, textureCoords);
		outputColor = t;
		return;
	}
	
	if (shadowFlagOut == 1)
	{
		vec4 t;
		if (passValOut == PASS_TERRAIN)
			t = texture(terrainTextureSampler[terrainTextureMap[0]], terrainTextureUV[0]);
		else
			t = texture(sampler, textureCoords);
		outputColor = t;
		gl_FragDepth = gl_FragCoord.z;// * 0.5 + 0.5;
		//gl_FragDepth = surfacePos.z / 10000.0;
		return;
	}

	vec3 normalBump = normalize(2.0 * texture(bumpSampler, textureCoords).xyz - 1.0);
	vec3 directionToCamera = normalize(camPos - surfacePos);
	
	outputColor = vec4(1.0);
	bool lightingFlag = true;
	if (passValOut == PASS_NORMAL || passValOut == PASS_DECAL)
	{
		vec4 t = texture(sampler, textureCoords);
		outputColor *= t;
		
		if (occlusionValue == OCCLUSION_TEST)
		{
			vec4 ocTex = texture(fbSilhouetteSampler, (gl_FragCoord.xy)/(fbSize));
			
			float occludeDepth = ocTex.x;
			
			
			if (gl_FragCoord.z > occludeDepth)
			{
				gl_FragDepth = gl_FragCoord.z-occludeDepth;
				outputColor.xyz = vec3(0.0, 0.0, 1.0);
				//outputColor.a = 0.6;
				//lightingFlag = false;
				return;
			}
		}
	}
	if (passValOut == PASS_UI)
	{
		vec4 t = texture(sampler, textureCoords);
		outputColor *= t;
	}
	if (passValOut == PASS_FINAL)
	{
		//////////////////////////////////////////////////
		//FXAA implementation
		//////////////////////////////////////////////////
		if (postProcessValue == 0)
		{
		// Choose the amount of sub-pixel aliasing removal.
		// This can effect sharpness.
		//   1.00 - upper limit (softer)
		//   0.75 - default amount of filtering
		//   0.50 - lower limit (sharper, less sub-pixel aliasing removal)
		//   0.25 - almost off
		//   0.00 - completely off
		//float fxaaQualitySubpix,
		// The minimum amount of local contrast required to apply algorithm.
		//   0.333 - too little (faster)
		//   0.250 - low quality
		//   0.166 - default
		//   0.125 - high quality 
		//   0.063 - overkill (slower)
		//float fxaaQualityEdgeThreshold,
		// Trims the algorithm from processing darks.
		//   0.0833 - upper limit (default, the start of visible unfiltered edges)
		//   0.0625 - high quality (faster)
		//   0.0312 - visible limit (slower)
		// Special notes when using FXAA_GREEN_AS_LUMA,
		//   Likely want to set this to zero.
			//outputColor = FxaaPixelShader(textureCoords, fbColorSampler, 1.0/fbSize, 0.75, 0.125, 0.0625);
			outputColor = FxaaPixelShader(textureCoords, fbColorSampler, 1.0/fbSize, 0.75, 0.166, 0.0833);
			//outputColor = texture(fbColorSampler, textureCoords);
		}
		
		//////////////////////////////////////////////////
		//Sharpening implementation
		//////////////////////////////////////////////////
		if (postProcessValue == 1)
		{
			float shMM = 1.4;
			float shOM = -0.1;
			vec4 shN = textureOffset(fbColorSampler, textureCoords, ivec2(0, -1));
			vec4 shS = textureOffset(fbColorSampler, textureCoords, ivec2(0, 1));
			vec4 shE = textureOffset(fbColorSampler, textureCoords, ivec2(1, 0));
			vec4 shW = textureOffset(fbColorSampler, textureCoords, ivec2(-1, 0));
			vec4 shM = textureOffset(fbColorSampler, textureCoords, ivec2(0, 0));
			outputColor = shM*shMM + shN*shOM + shS*shOM + shE*shOM + shW*shOM;
		}
		
		//////////////////////////////////////////////////
		//Toon implementation
		//////////////////////////////////////////////////
		if (postProcessValue == 1)
		{
		}
		
		//////////////////////////////////////////////////
		//Crosshatch implementation
		//////////////////////////////////////////////////
		if (postProcessValue == 5)
		{
			vec2 uv = textureCoords;
			vec3 tc = vec3(1.0, 0.0, 0.0);
			float vx_offset = 1.00;
			float hatch_y_offset = 5.0;
			float lum_threshold_1 = 1.0;
			float lum_threshold_2 = 0.9;
			float lum_threshold_3 = 0.8;
			float lum_threshold_4 = 0.7;
			
			if (uv.x < (vx_offset-0.005))
			{
				float lum = length(texture2D(fbColorSampler, uv).rgb);
				tc = vec3(1.0, 1.0, 1.0);
				if (lum < lum_threshold_1) 
				{
					if (mod(gl_FragCoord.x + gl_FragCoord.y, 10.0) == 0.0) 
					{
						tc = vec3(0.0, 0.0, 0.0);
					}
				}
				if (lum < lum_threshold_2) 
				{
					if (mod(gl_FragCoord.x - gl_FragCoord.y, 10.0) == 0.0) 
					{
						tc = vec3(0.0, 0.0, 0.0);
					}
				}  

				if (lum < lum_threshold_3) 
				{
					if (mod(gl_FragCoord.x + gl_FragCoord.y - hatch_y_offset, 10.0) == 0.0) 
					{
						tc = vec3(0.0, 0.0, 0.0);
					}
				}  

				if (lum < lum_threshold_4) 
				{
					if (mod(gl_FragCoord.x - gl_FragCoord.y - hatch_y_offset, 10.0) == 0.0) 
					{
						tc = vec3(0.0, 0.0, 0.0);
					}
				}
			}
			else if (uv.x>=(vx_offset+0.005))
			{
				tc = texture2D(fbColorSampler, uv).rgb;
			}
			outputColor = vec4(tc, 1.0);
		}
		
		//////////////////////////////////////////////////
		//SSAO implementation
		//////////////////////////////////////////////////
		//float dM=texture2D(fbDepthSampler,textureCoords).x;
		//float aoValue = 8.0;
		//for (float aaJ = -2.0; aaJ <= 2.0;aaJ += 2.0)
			//for (float aaI = -2.0;aaI <= 2.0;aaI += 2.0)
			//{
				//if ((aaJ < -0.1 || aaJ > 0.1) && (aaI < -0.1 || aaI > 0.1))
				//{
					//float aaDist = dM - texture(fbDepthSampler,textureCoords+(vec2(aaJ,aaI)/fbSize)).x;
					//if (aaDist > 0.000001 && aaDist < 0.00002)
						//aoValue -=  1.0;
				//}
			//}
		
		//outputColor.xyz *= clamp(vec3(aoValue/4.0 - 2.0)+1.6, 0.7, 1.0);
		
		//////////////////////////////////////////////////
		//Depth-Of-Field implementation
		//////////////////////////////////////////////////
		
		//vec4 tC = texture(fbColorSampler, textureCoords);
		//vec4 tD = texture(fbDepthSampler, textureCoords);
		//if (tD.x > 0.999)
		//{
			//outputColor.xyz = (rgbM + rgbNW + rgbNE + rgbSW + rgbSE) / 5.0;
		//}
		//outputColor *= tC;
		//outputColor.xyz = vec3(tD.x);
		
		//////////////////////////////////////////////////
		//Outline implementation (requires (gl_FragDepth = surfacePos.z / [maxDepth]))
		//////////////////////////////////////////////////
		if (postProcessValue == 2)
		{
			outputColor = vec4(1.0);
			//outputColor.xyz *= texture2D(fbColorSampler, textureCoords).rgb;
			outputColor.xyz *= texture(gPositionSampler, textureCoords).rgb;
			
			float dNW=textureOffset(fbDepthSampler,textureCoords, ivec2(-1.0,-1.0)).x;
			float dNE=textureOffset(fbDepthSampler,textureCoords, ivec2(1.0,-1.0)).x;
			float dSW=textureOffset(fbDepthSampler,textureCoords, ivec2(-1.0,1.0)).x;
			float dSE=textureOffset(fbDepthSampler,textureCoords, ivec2(1.0,1.0)).x;
			float dM=texture2D(fbDepthSampler,textureCoords).x;
			
			dNW = -0.1 / ((-1.0 + dNW) * ((20000.0-0.1)/20000.0));
			dNE = -0.1 / ((-1.0 + dNE) * ((20000.0-0.1)/20000.0));;
			dSW = -0.1 / ((-1.0 + dSW) * ((20000.0-0.1)/20000.0));;
			dSE = -0.1 / ((-1.0 + dSE) * ((20000.0-0.1)/20000.0));;
			dM = -0.1 / ((-1.0 + dM) * ((20000.0-0.1)/20000.0));;
			
			float diff = max(max(abs(dM-dNW), abs(dM-dNE)), max(abs(dM-dSW), abs(dM-dSE)));
			
			if (dM > 0.0)
			{
				outputColor.xyz *= clamp((1.0-diff), 0.5, 1.0);
			}
		}
		
		//vec4 shadowD = texture(fbShadowSampler, textureCoords);
		//outputColor.xyz = vec3(shadowD.z);
		
		return;
	}
	else if (passValOut == PASS_TERRAIN)
	{
		vec4 tex1 = texture(terrainTextureSampler[terrainTextureMap[0]], terrainTextureUV[0]);
		vec4 tex2 = texture(terrainTextureSampler[terrainTextureMap[1]], terrainTextureUV[1]);
		vec4 tex3 = texture(terrainTextureSampler[terrainTextureMap[2]], terrainTextureUV[2]);
		vec4 alp1 = texture(alphaTextureSampler, alphaTextureUV[0]);
		vec4 alp2 = texture(alphaTextureSampler, alphaTextureUV[1]);
		outputColor *= (tex1*(1.0-alp1.r) + tex2*(alp1.r))*(1.0-alp2.r) + tex3*(alp2.r);
		outputColor.xyz *= normalValue*normalValue+0.4;
		
		//outputColor.xyz *= losShade;
		int losX = 15 - int(mod(terrPos.x, 16));
		int losY = int(mod(terrPos.z, 16));
		//bool losBool = (losData[losY] & losTable[losX]) > 0;
		
		float losNW = ((losData[(losY+1 < 16)?losY+1:losY] & losTable[losX]) > 0) ? 1.0 : 0.0;
		float losNE = ((losData[(losY+1 < 16)?losY+1:losY] & losTable[(losX+1 < 16)?losX+1:losX]) > 0) ? 1.0 : 0.0;
		float losSE = ((losData[losY] & losTable[(losX+1 < 16)?losX+1:losX]) > 0) ? 1.0 : 0.0;
		float losSW = ((losData[losY] & losTable[losX]) > 0) ? 1.0 : 0.0;
		float valNW = abs(terrPos.x-floor(terrPos.x))*abs(terrPos.z-floor(terrPos.z));
		float valNE = abs(terrPos.x-floor(terrPos.x+1.0))*abs(terrPos.z-floor(terrPos.z));
		float valSE = abs(terrPos.x-floor(terrPos.x+1.0))*abs(terrPos.z-floor(terrPos.z+1.0));
		float valSW = abs(terrPos.x-floor(terrPos.x))*abs(terrPos.z-floor(terrPos.z+1.0));
		float shade = 0.5;
		//if (losShade > 0.6 && losShade < 0.9)
		{
			//shade = 0.0;
			shade += (valNW*losNW+valNE*losNE+valSE*losSE+valSW*losSW)*0.5;
		}
		//outputColor.xyz *= shade;
		
		//int losCol = int(mod(terrPos.x, 32.0));
		//int channel = int(losCol/8);
		//int los8Val = int(mod(losCol,8));
		//vec4 losTex = texelFetch(sampler, ivec2(terrPos.x/32.0, terrPos.z), 0)*255.0;
		//bool shadeFlag = (int(losTex[3-channel]) & int(losTable8[7-los8Val])) > 0;
		//if (shadeFlag)
			//outputColor.xyz *= 0.5;
		//outputColor.xyz = vec3(losTable8[los8Val]);
		
		float mulVal = 1.0;
		float losDist = 1.00;
		float losDist2 = 1.00;
		float losDist4 = losDist2*losDist2;
		losNW = CalcLOS(sampler, floor(terrPos.x)+losDist, floor(terrPos.z)+losDist);
		losNE = CalcLOS(sampler, floor(terrPos.x), floor(terrPos.z)+losDist);
		losSE = CalcLOS(sampler, floor(terrPos.x), floor(terrPos.z));
		losSW = CalcLOS(sampler, floor(terrPos.x)+losDist, floor(terrPos.z));
		float losSum = (losNW + losNE + losSE + losSW);
		if (losSum > 0.0) mulVal = 0.8;
		if (losSum > 1.0) mulVal = 1.0;
		if (losSum > 2.0) mulVal = 1.2;
		if (losSum > 3.0) mulVal = 1.0;
		valNW = abs(terrPos.x-floor(terrPos.x))*abs(terrPos.z-floor(terrPos.z))/losDist4;
		valNE = abs(terrPos.x-floor(terrPos.x+losDist2))*abs(terrPos.z-floor(terrPos.z))/losDist4;
		valSE = abs(terrPos.x-floor(terrPos.x+losDist2))*abs(terrPos.z-floor(terrPos.z+losDist2))/losDist4;
		valSW = abs(terrPos.x-floor(terrPos.x))*abs(terrPos.z-floor(terrPos.z+losDist2))/losDist4;
		shade = 0.75;
		shade += clamp((valNW*losNW+valNE*losNE+valSE*losSE+valSW*losSW)*0.25, 0.0, 0.25);
		outputColor.xyz *= shade;
	}
	if (passValOut == PASS_NORMAL)
	{
		if (lightingFlag)
		{
			//float darkenVal = dot(normalBump, lightVec)*0.5+0.75;
			//darkenVal = (floor(darkenVal*3.0)/3.0);
			//outputColor.xyz *= darkenVal;
			outputColor.xyz *= (clamp(pow(dot(normalBump, lightVec), 1.0), -1.0, 1.0))*0.5+0.75;
		}
	}
	
	if (passValOut != PASS_UI)
	{
		vec4 shadowD = texture(fbShadowSampler, shadowOut.xy);
		float bias;
		if (passValOut == PASS_TERRAIN)
			bias = 0.012*tan(acos(dot(normalVec, lightVec)));
		else
			bias = 0.012*tan(acos(dot(normalBump, lightVec)));
		bias = clamp(bias, 0.0, 0.001);
		//bias = 0.0;
		
		float vis = 1.0;
		float span = 0.5;
		float step = 0.25;
		for (float j = -span;j <= span;j += step)
			for (float i = -span;i <= span;i += step)
				if (texture(fbShadowSampler, shadowOut.xy+(vec2(i, j)/fbShadowSize)).z < shadowOut.z-bias)
				{
					vis -= 0.025;
					//vis /= 1.05;
				}
		vis *= 1.5;
		vis = clamp(vis, 0.0, 1.0);
		//outputColor.xyz *= vis;
		//if (shadowD.z < shadowOut.z-bias)
			//outputColor.xyz *= 0.5;
		//outputColor.xyz = vec3(shadowD.z);
		
		//Poisson
		vec2 pDisk[4] = vec2[](
			vec2(-0.7800193, 0.1936351),
			vec2(0.7215998, 0.08988218),
			vec2(-0.1250293, -0.3693504),
			vec2(0.08140863, 0.6992921)
		);
		vec2 poissonDisk[16] = vec2[](
			vec2(-0.2903507, 0.2686484),
			vec2(0.2856117, 0.4309694),
			vec2(-0.4875696, 0.603075),
			vec2(0.09155953, -0.2507944),
			vec2(-0.8156705, 0.1442883),
			vec2(-0.2563568, 0.9632782),
			vec2(0.7289771, 0.5478004),
			vec2(-0.3943505, -0.2128524),
			vec2(-0.7628381, -0.4662621),
			vec2(0.6670182, -0.1728864),
			vec2(-0.4954273, -0.7791401),
			vec2(0.2746873, 0.8936772),
			vec2(-0.1587755, -0.9759419),
			vec2(-0.09291486, 0.5817585),
			vec2(0.2324807, -0.7673864),
			vec2(0.9113816, 0.2115391)
		);
		for (int i = 0;i < 4;i ++)
		{
			pDisk[i] *= 10.0;
		}
		for (int i = 0;i < 16;i ++)
		{
			poissonDisk[i] *= 5.0;
		}
		vis = 1.0;
		float sVal = 0.0;
		for (int i = 0;i < 4;i ++)
		{
			if (texture(fbShadowSampler, shadowOut.xy+(pDisk[i]/fbShadowSize)).z < shadowOut.z-bias)
			{
				vis -= 0.25;
				sVal += 1.0;
			}
		}
		if (vis <= 0.1)
		{
			vis = 0.5;
			//outputColor.xyz *= 0.5;
		}
		else if (vis < 1.0)
		{
			vis = 1.0;
			sVal = 0.0;
			for (int i = 0;i < 16;i ++)
			{
				if (texture(fbShadowSampler, shadowOut.xy+(poissonDisk[i]/fbShadowSize)).z < shadowOut.z-bias)
				{
					vis -= 0.03125;
					sVal += 1.0;
				}
			}
		}
		//if (sVal >= 1)
			outputColor.xyz *= vis;
		//outputColor.xyz *= vis;
	}
}