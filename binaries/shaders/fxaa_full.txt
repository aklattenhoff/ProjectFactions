



		float fxaaQualityEdgeThreshold = 0.125;
		float fxaaQualityEdgeThresholdMin = 0.0625;
		float fxaaQualitySubpix = 0.75;
		float FXAA_QUALITY__P1 = 1.5;
		
		vec2 posM = textureCoords;
		float lumaM = texture(fbColorSampler, posM+vec2(0.0,0.0)/fbSize).g;
		float lumaS = texture(fbColorSampler, posM+vec2(0.0,1.0)/fbSize).g;
		float lumaE = texture(fbColorSampler, posM+vec2(1.0,0.0)/fbSize).g;
		float lumaN = texture(fbColorSampler, posM+vec2(0.0,-1.0)/fbSize).g;
		float lumaW = texture(fbColorSampler, posM+vec2(-1.0,0.0)/fbSize).g;
		
		float lumaNW = texture(fbColorSampler, posM+vec2(-1.0,-1.0)/fbSize).g;
		float lumaSE = texture(fbColorSampler, posM+vec2(1.0,1.0)/fbSize).g;
		float lumaNE = texture(fbColorSampler, posM+vec2(1.0,-1.0)/fbSize).g;
		float lumaSW = texture(fbColorSampler, posM+vec2(-1.0,1.0)/fbSize).g;
		
		float maxSM = max(lumaS, lumaM);
		float minSM = min(lumaS, lumaM);
		float maxESM = max(lumaE, maxSM);
		float minESM = min(lumaE, minSM);
		float maxWN = max(lumaN, lumaW);
		float minWN = min(lumaN, lumaW);
		float rangeMax = max(maxWN, maxESM);
		float rangeMin = max(minWN, minESM);
		float rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;
		float range = rangeMax - rangeMin;
		float rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);
		bool earlyExit = range < rangeMaxClamped;
		
		float lumaNS = lumaN + lumaS;
		float lumaWE = lumaW + lumaE;
		float subpixRcpRange = 1.0/range;
		float subpixNSWE = lumaNS + lumaWE;
		float edgeHorz1 = (-2.0 * lumaM) + lumaNS;
		float edgeVert1 = (-2.0 * lumaM) + lumaWE;
		/*--------------------------------------------------------------------------*/
		float lumaNESE = lumaNE + lumaSE;
		float lumaNWNE = lumaNW + lumaNE;
		float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;
		float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;
		/*--------------------------------------------------------------------------*/
		float lumaNWSW = lumaNW + lumaSW;
		float lumaSWSE = lumaSW + lumaSE;
		float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);
		float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);
		float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;
		float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;
		float edgeHorz = abs(edgeHorz3) + edgeHorz4;
		float edgeVert = abs(edgeVert3) + edgeVert4;
		
		float subpixNWSWNESE = lumaNWSW + lumaNESE;
		float lengthSign = 1.0/fbSize.x;
		bool horzSpan = edgeHorz >= edgeVert;
		float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;
		/*--------------------------------------------------------------------------*/
		if(!horzSpan) lumaN = lumaW;
		if(!horzSpan) lumaS = lumaE;
		if(horzSpan) lengthSign = 1.0/fbSize.y;
		float subpixB = (subpixA * (1.0/12.0)) - lumaM;
		/*--------------------------------------------------------------------------*/
		float gradientN = lumaN - lumaM;
		float gradientS = lumaS - lumaM;
		float lumaNN = lumaN + lumaM;
		float lumaSS = lumaS + lumaM;
		bool pairN = abs(gradientN) >= abs(gradientS);
		float gradient = max(abs(gradientN), abs(gradientS));
		if(pairN) lengthSign = -lengthSign;
		float subpixC = clamp(abs(subpixB) * subpixRcpRange, 0.0, 1.0);
		
		vec2 posB;
		posB.x = posM.x;
		posB.y = posM.y;
		vec2 offNP;
		offNP.x = (!horzSpan) ? 0.0 : 1.0/fbSize.x;
		offNP.y = (horzSpan) ? 0.0 : 1.0/fbSize.y;
		if (!horzSpan) posB.x += lengthSign * 0.5;
		if (horzSpan) posB.y += lengthSign * 0.5;
		
		vec2 posN;
		posN.x = posB.x - offNP.x * 1.0;//This has some quality attached to it
		posN.y = posB.y - offNP.y * 1.0;//This has some quality attached to it
		
		vec2 posP;
		posP.x = posB.x + offNP.x * 1.0;//This has some quality attached to it
		posP.y = posB.y + offNP.y * 1.0;//This has some quality attached to it
		
		float lumaEndN = texture(fbColorSampler, posN).g;
		float lumaEndP = texture(fbColorSampler, posP).g;
		float subpixD = ((-2.0)*subpixC) + 3.0;
		float subpixE = subpixC * subpixC;
		
		if(!pairN) lumaNN = lumaSS;
		float gradientScaled = gradient * 1.0/4.0;
		float lumaMM = lumaM - lumaNN * 0.5;
		float subpixF = subpixD * subpixE;
		bool lumaMLTZero = lumaMM < 0.0;
		/*--------------------------------------------------------------------------*/
		lumaEndN -= lumaNN * 0.5;
		lumaEndP -= lumaNN * 0.5;
		bool doneN = abs(lumaEndN) >= gradientScaled;
		bool doneP = abs(lumaEndP) >= gradientScaled;
		if(!doneN) posN.x -= offNP.x * FXAA_QUALITY__P1;
		if(!doneN) posN.y -= offNP.y * FXAA_QUALITY__P1;
		bool doneNP = (!doneN) || (!doneP);
		if(!doneP) posP.x += offNP.x * FXAA_QUALITY__P1;
		if(!doneP) posP.y += offNP.y * FXAA_QUALITY__P1;
		
		bool doneN;
		bool doneP;
		
		float FXAA_QUALITY = 1.0;
		
		lumaEndN -= lumaNN * 0.5;
		lumaEndP -= lumaNN * 0.5;
		doneN = abs(lumaEndN) >= gradientScaled;
		doneP = abs(lumaEndP) >= gradientScaled;
		if (!doneN) posN.x -= offNP.x * FXAA_QUALITY;
		if (!doneN) posN.y -= offNP.y * FXAA_QUALITY;
		doneNP = (!doneN) || (!doneP);
		if (!doneP) posP.x += offNP.x * FXAA_QUALITY;
		if (!doneP) posP.y += offNP.y * FXAA_QUALITY;
		
		float dstN = posM.x - posN.x;
		float dstP = posP.x - posM.x;
		if(!horzSpan) dstN = posM.y - posN.y;
		if(!horzSpan) dstP = posP.y - posM.y;
		/*--------------------------------------------------------------------------*/
		bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;
		float spanLength = (dstP + dstN);
		bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;
		float spanLengthRcp = 1.0/spanLength;
		/*--------------------------------------------------------------------------*/
		bool directionN = dstN < dstP;
		float dst = min(dstN, dstP);
		bool goodSpan = directionN ? goodSpanN : goodSpanP;
		float subpixG = subpixF * subpixF;
		float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;
		float subpixH = subpixG * fxaaQualitySubpix;
		/*--------------------------------------------------------------------------*/
		float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;
		float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
		if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;
		if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;
		outputColor.xyz = texture(fbColorSampler, posM).xyz;