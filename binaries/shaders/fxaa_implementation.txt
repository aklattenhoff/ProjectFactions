#version 330
#define FXAA_PC 1
#define FXAA_GLSL_130 1
#define FXAA_QUALITY__PRESET 12

#define FXAA_GREEN_AS_LUMA 1
#define FXAA_GATHER4_ALPHA 0
#define FXAA_DISCARD 0

#define FXAA_QUALITY__PS 5
#define FXAA_QUALITY__P0 1.0
#define FXAA_QUALITY__P1 1.5
#define FXAA_QUALITY__P2 2.0
#define FXAA_QUALITY__P3 4.0
#define FXAA_QUALITY__P4 12.0


/*============================================================================

                                API PORTING

============================================================================*/
#define FxaaSat(x) clamp(x, 0.0, 1.0)
#define FxaaTex sampler2D
#define FxaaTexTop(t, p) texture(t, p, 0.0)
#define FxaaTexOff(t, p, o) textureOffset(t, p, o)

float FxaaLuma(vec4 rgba) { return rgba.y; }

vec4 FxaaPixelShader(
    vec2 pos,
    FxaaTex tex,
    vec2 fxaaQualityRcpFrame,
    float fxaaQualitySubpix,
    float fxaaQualityEdgeThreshold,
    float fxaaQualityEdgeThresholdMin
) {
/*--------------------------------------------------------------------------*/
	vec2 posM = pos;
	vec4 rgbM = FxaaTexTop(tex, posM);
	float lumaM = FxaaLuma(rgbM);
	float lumaS = FxaaLuma(FxaaTexOff(tex, posM, ivec2( 0, 1)));
	float lumaE = FxaaLuma(FxaaTexOff(tex, posM, ivec2( 1, 0)));
	float lumaN = FxaaLuma(FxaaTexOff(tex, posM, ivec2( 0,-1)));
	float lumaW = FxaaLuma(FxaaTexOff(tex, posM, ivec2(-1, 0)));
/*--------------------------------------------------------------------------*/
    float maxSM = max(lumaS, lumaM);
    float minSM = min(lumaS, lumaM);
    float maxESM = max(lumaE, maxSM);
    float minESM = min(lumaE, minSM);
    float maxWN = max(lumaN, lumaW);
    float minWN = min(lumaN, lumaW);
    float rangeMax = max(maxWN, maxESM);
    float rangeMin = min(minWN, minESM);
    float rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;
    float range = rangeMax - rangeMin;
    float rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);
    bool earlyExit = range < rangeMaxClamped;
/*--------------------------------------------------------------------------*/
    if(earlyExit)
		return rgbM;
/*--------------------------------------------------------------------------*/
        float lumaNW = FxaaLuma(FxaaTexOff(tex, posM, ivec2(-1,-1)));
        float lumaSE = FxaaLuma(FxaaTexOff(tex, posM, ivec2( 1, 1)));
        float lumaNE = FxaaLuma(FxaaTexOff(tex, posM, ivec2( 1,-1)));
        float lumaSW = FxaaLuma(FxaaTexOff(tex, posM, ivec2(-1, 1)));
/*--------------------------------------------------------------------------*/
    float lumaNS = lumaN + lumaS;
    float lumaWE = lumaW + lumaE;
    float subpixRcpRange = 1.0/range;
    float subpixNSWE = lumaNS + lumaWE;
    float edgeHorz1 = (-2.0 * lumaM) + lumaNS;
    float edgeVert1 = (-2.0 * lumaM) + lumaWE;
/*--------------------------------------------------------------------------*/
    float lumaNESE = lumaNE + lumaSE;
    float lumaNWNE = lumaNW + lumaNE;
    float edgeHorz2 = (-2.0 * lumaE) + lumaNESE;
    float edgeVert2 = (-2.0 * lumaN) + lumaNWNE;
/*--------------------------------------------------------------------------*/
    float lumaNWSW = lumaNW + lumaSW;
    float lumaSWSE = lumaSW + lumaSE;
    float edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);
    float edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);
    float edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;
    float edgeVert3 = (-2.0 * lumaS) + lumaSWSE;
    float edgeHorz = abs(edgeHorz3) + edgeHorz4;
    float edgeVert = abs(edgeVert3) + edgeVert4;
/*--------------------------------------------------------------------------*/
    float subpixNWSWNESE = lumaNWSW + lumaNESE;
    float lengthSign = fxaaQualityRcpFrame.x;
    bool horzSpan = edgeHorz >= edgeVert;
    float subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;
/*--------------------------------------------------------------------------*/
    if(!horzSpan) lumaN = lumaW;
    if(!horzSpan) lumaS = lumaE;
    if(horzSpan) lengthSign = fxaaQualityRcpFrame.y;
    float subpixB = (subpixA * (1.0/12.0)) - lumaM;
/*--------------------------------------------------------------------------*/
    float gradientN = lumaN - lumaM;
    float gradientS = lumaS - lumaM;
    float lumaNN = lumaN + lumaM;
    float lumaSS = lumaS + lumaM;
    bool pairN = abs(gradientN) >= abs(gradientS);
    float gradient = max(abs(gradientN), abs(gradientS));
    if(pairN) lengthSign = -lengthSign;
    float subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);
/*--------------------------------------------------------------------------*/
    vec2 posB;
    posB.x = posM.x;
    posB.y = posM.y;
    vec2 offNP;
    offNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;
    offNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;
    if(!horzSpan) posB.x += lengthSign * 0.5;
    if( horzSpan) posB.y += lengthSign * 0.5;
/*--------------------------------------------------------------------------*/
    vec2 posN;
    posN.x = posB.x - offNP.x * FXAA_QUALITY__P0;
    posN.y = posB.y - offNP.y * FXAA_QUALITY__P0;
    vec2 posP;
    posP.x = posB.x + offNP.x * FXAA_QUALITY__P0;
    posP.y = posB.y + offNP.y * FXAA_QUALITY__P0;
    float subpixD = ((-2.0)*subpixC) + 3.0;
    float lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));
    float subpixE = subpixC * subpixC;
    float lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));
/*--------------------------------------------------------------------------*/
    if(!pairN) lumaNN = lumaSS;
    float gradientScaled = gradient * 1.0/4.0;
    float lumaMM = lumaM - lumaNN * 0.5;
    float subpixF = subpixD * subpixE;
    bool lumaMLTZero = lumaMM < 0.0;
	
	lumaEndN -= lumaNN * 0.5;
	lumaEndP -= lumaNN * 0.5;

	bool doneN = true;
	bool doneP = true;
	bool doneNP = true;
	for (int k = 0;k < FXAA_QUALITY__PS;k ++)
	{
		if(!doneNP) break;
		float FXAA_QUALITY = 1.0;
		if (k == 0) FXAA_QUALITY = FXAA_QUALITY__P0;
		if (k == 1) FXAA_QUALITY = FXAA_QUALITY__P1;
		if (k == 2) FXAA_QUALITY = FXAA_QUALITY__P2;
		if (k == 3) FXAA_QUALITY = FXAA_QUALITY__P3;
		if (k == 4) FXAA_QUALITY = FXAA_QUALITY__P4;
		
		if(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));
        if(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));
        if(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;
        if(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;
		doneN = abs(lumaEndN) >= gradientScaled;
		doneP = abs(lumaEndP) >= gradientScaled;
		if(!doneN) posN.x -= offNP.x * FXAA_QUALITY;
		if(!doneN) posN.y -= offNP.y * FXAA_QUALITY;
		doneNP = (!doneN) || (!doneP);
		if(!doneP) posP.x += offNP.x * FXAA_QUALITY;
		if(!doneP) posP.y += offNP.y * FXAA_QUALITY;
	}
/*--------------------------------------------------------------------------*/
    float dstN = posM.x - posN.x;
    float dstP = posP.x - posM.x;
    if(!horzSpan) dstN = posM.y - posN.y;
    if(!horzSpan) dstP = posP.y - posM.y;
/*--------------------------------------------------------------------------*/
    bool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;
    float spanLength = (dstP + dstN);
    bool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;
    float spanLengthRcp = 1.0/spanLength;
/*--------------------------------------------------------------------------*/
    bool directionN = dstN < dstP;
    float dst = min(dstN, dstP);
    bool goodSpan = directionN ? goodSpanN : goodSpanP;
    float subpixG = subpixF * subpixF;
    float pixelOffset = (dst * (-spanLengthRcp)) + 0.5;
    float subpixH = subpixG * fxaaQualitySubpix;
/*--------------------------------------------------------------------------*/
    float pixelOffsetGood = goodSpan ? pixelOffset : 0.0;
    float pixelOffsetSubpix = max(pixelOffsetGood, subpixH);
    if(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;
    if( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;
    return vec4(FxaaTexTop(tex, posM).xyz, lumaM);
}

// A single iteration of Bob Jenkins' One-At-A-Time hashing algorithm.
uint hash( uint x ) {
    x += ( x << 10u );
    x ^= ( x >>  6u );
    x += ( x <<  3u );
    x ^= ( x >> 11u );
    x += ( x << 15u );
    return x;
}
// Compound versions of the hashing algorithm I whipped together.
uint hash( uvec2 v ) { return hash( v.x ^ hash(v.y)                         ); }
uint hash( uvec3 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z)             ); }
uint hash( uvec4 v ) { return hash( v.x ^ hash(v.y) ^ hash(v.z) ^ hash(v.w) ); }
// Construct a float with half-open range [0:1] using low 23 bits.
// All zeroes yields 0.0, all ones yields the next smallest representable value below 1.0.
float floatConstruct( uint m ) {
    const uint ieeeMantissa = 0x007FFFFFu; // binary32 mantissa bitmask
    const uint ieeeOne      = 0x3F800000u; // 1.0 in IEEE binary32

    m &= ieeeMantissa;                     // Keep only mantissa bits (fractional part)
    m |= ieeeOne;                          // Add fractional part to 1.0

    float  f = uintBitsToFloat( m );       // Range [1:2]
    return f - 1.0;                        // Range [0:1]
}
// Pseudo-random value in half-open range [0:1].
float random( float x ) { return floatConstruct(hash(floatBitsToUint(x))); }
float random( vec2  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec3  v ) { return floatConstruct(hash(floatBitsToUint(v))); }
float random( vec4  v ) { return floatConstruct(hash(floatBitsToUint(v))); }

in vec3 camPos;
in vec3 surfacePos;
in vec3 directionToLight;
in vec2 textureCoords;
in vec3 normalVec;
in float normalValue;
in vec3 lightVec;
flat in int passValOut;
flat in int shadowFlagOut;
in vec4 shadowOut;

uniform sampler2D sampler;
uniform sampler2D bumpSampler;

uniform vec2 fbSize;
uniform sampler2D fbColorSampler;
uniform sampler2D fbDepthSampler;
uniform sampler2D fbSilhouetteSampler;
uniform sampler2D fbShadowSampler;

const int PASS_NORMAL = 0;
const int PASS_TERRAIN = 1;
const int PASS_UI = 2;
const int PASS_FINAL = 3;
const int PASS_DECAL = 4;
const int PASS_LINE = 5;

const int OCCLUSION_NONE = 0;
const int OCCLUSION_SET = 1;
const int OCCLUSION_TEST = 2;
uniform int occlusionValue;

//Data for terrain pass
const int MAX_TERRAIN_TEXTURES = 16;
uniform sampler2D terrainTextureSampler[MAX_TERRAIN_TEXTURES];
uniform sampler2D alphaTextureSampler;
in vec2 terrainTextureUV[3];
flat in int terrainTextureMap[3];
in vec2 alphaTextureUV[2];

out vec4 outputColor;

void main()
{
	gl_FragDepth = gl_FragCoord.z;
	//gl_FragDepth = surfacePos.z / 10000.0;
	if (passValOut == PASS_LINE)
	{
		outputColor = vec4(1.0, 0.0, 0.0, 1.0);
		return;
	}
	if (occlusionValue == OCCLUSION_SET)
	{
		vec4 t = texture(sampler, textureCoords);
		outputColor = t;
		return;
	}
	
	if (shadowFlagOut == 1)
	{
		vec4 t;
		if (passValOut == PASS_TERRAIN)
			t = texture(terrainTextureSampler[terrainTextureMap[0]], terrainTextureUV[0]);
		else
			t = texture(sampler, textureCoords);
		outputColor = t;
		gl_FragDepth = gl_FragCoord.z;// * 0.5 + 0.5;
		//gl_FragDepth = surfacePos.z / 10000.0;
		return;
	}

	vec3 normalBump = normalize(2.0 * texture(bumpSampler, textureCoords).xyz - 1.0);
	vec3 directionToCamera = normalize(camPos - surfacePos);
	
	outputColor = vec4(1.0);
	bool lightingFlag = true;
	if (passValOut == PASS_NORMAL || passValOut == PASS_DECAL)
	{
		vec4 t = texture(sampler, textureCoords);
		outputColor *= t;
		
		if (occlusionValue == OCCLUSION_TEST)
		{
			vec4 ocTex = texture(fbSilhouetteSampler, (gl_FragCoord.xy)/(fbSize));
			
			float occludeDepth = ocTex.x;
			
			
			if (gl_FragCoord.z > occludeDepth)
			{
				gl_FragDepth = gl_FragCoord.z-occludeDepth;
				outputColor.xyz = vec3(0.0, 0.0, 1.0);
				//outputColor.a = 0.6;
				//lightingFlag = false;
				return;
			}
		}
	}
	if (passValOut == PASS_UI)
	{
		vec4 t = texture(sampler, textureCoords);
		outputColor *= t;
	}
	if (passValOut == PASS_FINAL)
	{
		//////////////////////////////////////////////////
		//FXAA implementation
		//////////////////////////////////////////////////
		/*float FXAA_SPAN_MAX = 8.0;
		float FXAA_REDUCE_MUL = 1.0/8.0;
		float FXAA_REDUCE_MIN = 1.0/128.0;
		
		vec3 rgbNW=texture(fbColorSampler,textureCoords+(vec2(-1.0,-1.0)/fbSize)).xyz;
		vec3 rgbNE=texture(fbColorSampler,textureCoords+(vec2(1.0,-1.0)/fbSize)).xyz;
		vec3 rgbSW=texture(fbColorSampler,textureCoords+(vec2(-1.0,1.0)/fbSize)).xyz;
		vec3 rgbSE=texture(fbColorSampler,textureCoords+(vec2(1.0,1.0)/fbSize)).xyz;
		vec3 rgbM=texture(fbColorSampler,textureCoords).xyz;
		
		vec3 luma=vec3(0.299, 0.587, 0.114);
		float lumaNW = dot(rgbNW, luma);
		float lumaNE = dot(rgbNE, luma);
		float lumaSW = dot(rgbSW, luma);
		float lumaSE = dot(rgbSE, luma);
		float lumaM  = dot(rgbM,  luma);
		float lumaMin = min(lumaM, min(min(lumaNW, lumaNE), min(lumaSW, lumaSE)));
		float lumaMax = max(lumaM, max(max(lumaNW, lumaNE), max(lumaSW, lumaSE)));
		
		vec2 dir;
		dir.x = -((lumaNW + lumaNE) - (lumaSW + lumaSE));
		dir.y =  ((lumaNW + lumaSW) - (lumaNE + lumaSE));
		
		float dirReduce = max(
		(lumaNW + lumaNE + lumaSW + lumaSE) * (0.25 * FXAA_REDUCE_MUL),
		FXAA_REDUCE_MIN);
		
		float rcpDirMin = 1.0/(min(abs(dir.x), abs(dir.y)) + dirReduce);
		
		dir = min(vec2( FXAA_SPAN_MAX,  FXAA_SPAN_MAX),
			max(vec2(-FXAA_SPAN_MAX, -FXAA_SPAN_MAX),
			dir * rcpDirMin)) / fbSize;
			
		vec3 rgbA = (1.0/2.0) * (
		texture(fbColorSampler, textureCoords.xy + dir * (1.0/3.0 - 0.5)).xyz +
		texture(fbColorSampler, textureCoords.xy + dir * (2.0/3.0 - 0.5)).xyz);
		vec3 rgbB = rgbA * (1.0/2.0) + (1.0/4.0) * (
		texture(fbColorSampler, textureCoords.xy + dir * (0.0/3.0 - 0.5)).xyz +
		texture(fbColorSampler, textureCoords.xy + dir * (3.0/3.0 - 0.5)).xyz);
		float lumaB = dot(rgbB, luma);

		if((lumaB < lumaMin) || (lumaB > lumaMax)){
			outputColor.xyz=rgbA;
		}else{
			outputColor.xyz=rgbB;
		}*/
		//outputColor.xyz = rgbM;
		
		
		outputColor = FxaaPixelShader(textureCoords,
        fbColorSampler,							// FxaaTex tex,
        1.0/fbSize,							// vec2 fxaaQualityRcpFrame,
        0.75f,									// float fxaaQualitySubpix,
        0.166f,									// float fxaaQualityEdgeThreshold,
        0.0833f								// float fxaaQualityEdgeThresholdMin
		);
		
		//outputColor.xyz = texture(fbColorSampler, textureCoords.xy).xyz;
		
		//////////////////////////////////////////////////
		//SSAO implementation
		//////////////////////////////////////////////////
		float dM=texture2D(fbDepthSampler,textureCoords).x;
		float aoValue = 8.0;
		for (float aaJ = -2.0; aaJ <= 2.0;aaJ += 2.0)
			for (float aaI = -2.0;aaI <= 2.0;aaI += 2.0)
			{
				if ((aaJ < -0.1 || aaJ > 0.1) && (aaI < -0.1 || aaI > 0.1))
				{
					float aaDist = dM - texture(fbDepthSampler,textureCoords+(vec2(aaJ,aaI)/fbSize)).x;
					if (aaDist > 0.000001 && aaDist < 0.00002)
						aoValue -=  1.0;
				}
			}
		
		//outputColor.xyz *= clamp(vec3(aoValue/4.0 - 2.0)+1.6, 0.7, 1.0);
		
		//////////////////////////////////////////////////
		//Depth-Of-Field implementation
		//////////////////////////////////////////////////
		
		//vec4 tC = texture(fbColorSampler, textureCoords);
		//vec4 tD = texture(fbDepthSampler, textureCoords);
		//if (tD.x > 0.999)
		//{
			//outputColor.xyz = (rgbM + rgbNW + rgbNE + rgbSW + rgbSE) / 5.0;
		//}
		//outputColor *= tC;
		//outputColor.xyz = vec3(tD.x);
		
		//////////////////////////////////////////////////
		//Outline implementation (requires (gl_FragDepth = surfacePos.z / [maxDepth]))
		//////////////////////////////////////////////////
		
		//float dNW=texture(fbDepthSampler,textureCoords+(vec2(-1.0,-1.0)/fbSize)).x;
		//float dNE=texture(fbDepthSampler,textureCoords+(vec2(1.0,-1.0)/fbSize)).x;
		//float dSW=texture(fbDepthSampler,textureCoords+(vec2(-1.0,1.0)/fbSize)).x;
		//float dSE=texture(fbDepthSampler,textureCoords+(vec2(1.0,1.0)/fbSize)).x;
		//float dM=texture2D(fbDepthSampler,textureCoords).x;
		
		//float diff = max(max(abs(dM-dNW), abs(dM-dNE)), max(abs(dM-dSW), abs(dM-dSE)));
		//float outlineCount = 0.0;
		//if (dM-dNW > 0.001) outlineCount += 1.0;
		//if (dM-dNE > 0.001) outlineCount += 1.0;
		//if (dM-dSW > 0.001) outlineCount += 1.0;
		//if (dM-dSE > 0.001) outlineCount += 1.0;
		//if (diff > 1/(pow(dM+1.0, 2.0)*10240.0))
		//if (diff > 0.001)
		//{
			//outputColor.xyz *= vec3(1.0, 1.0, 1.0) * (4.0-outlineCount)/4.0;
		//}
		
		//vec4 shadowD = texture(fbShadowSampler, textureCoords);
		//outputColor.xyz = vec3(shadowD.z);
		
		return;
	}
	else if (passValOut == PASS_TERRAIN)
	{
		vec4 tex1 = texture(terrainTextureSampler[terrainTextureMap[0]], terrainTextureUV[0]);
		vec4 tex2 = texture(terrainTextureSampler[terrainTextureMap[1]], terrainTextureUV[1]);
		vec4 tex3 = texture(terrainTextureSampler[terrainTextureMap[2]], terrainTextureUV[2]);
		vec4 alp1 = texture(alphaTextureSampler, alphaTextureUV[0]);
		vec4 alp2 = texture(alphaTextureSampler, alphaTextureUV[1]);
		outputColor *= (tex1*(1.0-alp1.r) + tex2*(alp1.r))*(1.0-alp2.r) + tex3*(alp2.r);
		outputColor.xyz *= normalValue*normalValue+0.4;
	}
	if (passValOut == PASS_NORMAL)
	{
		if (lightingFlag)
		{
			outputColor.xyz *= dot(normalBump, lightVec)*0.5+0.75;
		}
	}
	
	if (passValOut != PASS_UI)
	{
		vec4 shadowD = texture(fbShadowSampler, shadowOut.xy);
		float bias;
		if (passValOut == PASS_TERRAIN)
			bias = 0.001*tan(acos(dot(normalVec, lightVec)));
		else
			bias = 0.001*tan(acos(dot(normalBump, lightVec)));
		bias = clamp(bias, 0.0, 0.01);
		
		float vis = 1.0;
		float span = 1.1;
		float step = 0.55;
		for (float j = -span;j <= span;j += step)
			for (float i = -span;i <= span;i += step)
				if (texture(fbShadowSampler, shadowOut.xy+(vec2(i, j)/fbSize)).z < shadowOut.z-bias)
					vis -= 0.01;
		outputColor.xyz *= vis;
		//if (shadowD.z < shadowOut.z-bias)
			//outputColor.xyz *= 0.5;
		//outputColor.xyz = vec3(shadowD.z);
	}
}